# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CzP2jCibO9ieuIEXRVhA3kd9zZ0b_U-I

# **Data Mining Superstore: Explorasi, Klasifikasi**

**Langkah 1 : Upload Dan Load Data**
"""

import pandas as pd
from google.colab import files
uploaded = files.upload()
df = pd.read_excel("Datasets Superstore.xlsx")
df.head

"""**Langkah 2 : Eksplorasi Data**"""

df.info()
print("\nMissing values : \n", df.isnull().sum())
df.describe()
df.columns

"""**Langkah 3 : Visualisasi**"""

import seaborn as sns
import matplotlib.pyplot as plt

df.groupby('Category')['Sales'].sum().plot(kind='bar', title='Penjualan per Kategori')
plt.ylabel('Total Sales')
plt.show()

sns.scatterplot(data=df, x='Discount', y='Profit')
plt.title('Diskon Vs Profit')
plt.show()

"""**Langkah 4 : Klasifikasi Untung/Rugi**"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

df['Label'] = df['Profit'].apply(lambda x:1 if x > 0 else 0)
features = df[['Sales', 'Discount', 'Quantity']].fillna(0)
labels = df['Label']

x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=2)
model = DecisionTreeClassifier()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)

print('Classification Report: \n', classification_report(y_test, y_pred))
print('Confusion Matrix: \n', confusion_matrix(y_test, y_pred))

"""# **TUGAS - BUAT 3 ALGO LAIN DENGAN ACUAN DATA PADA EXCEL YANG SAMA**

**Algo 1 - Support Vector Machine (SVM): Klasifikasi Discount**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay

# Label: 1 kalau Discount >= 0.2 (diskon tinggi), 0 kalau lebih rendah
df['Label'] = df['Discount'].apply(lambda x: 1 if x >= 0.2 else 0)

features = df[['Sales', 'Profit', 'Quantity']].fillna(0)
labels = df['Label']

x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=2)

model = SVC()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

print("Classification Report:\n", classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)

# Visualisasi Confusion Matrix
plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Diskon Rendah', 'Diskon Tinggi'], yticklabels=['Diskon Rendah', 'Diskon Tinggi'])
plt.xlabel('Prediksi')
plt.ylabel('Aktual')
plt.title('Confusion Matrix: Prediksi Diskon Tinggi/Rendah')
plt.show()

total_produk = df.shape[0]
print(f"Jumlah total produk: {total_produk}")

# Jumlah produk dengan diskon tinggi (Label 1)
produk_diskon_tinggi = df[df['Label'] == 1].shape[0]
print(f"Jumlah produk dengan diskon tinggi: {produk_diskon_tinggi}")

# Jumlah produk dengan diskon rendah (Label 0)
produk_diskon_rendah = df[df['Label'] == 0].shape[0]
print(f"Jumlah produk dengan diskon rendah: {produk_diskon_rendah}")

"""**Algo 2 - K Nearest Neighbors(KNN): Klasifikasi Segment**"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

labels = df['Segment']

features = df[['Sales', 'Profit', 'Quantity', 'Region']].copy()

features_encoded = pd.get_dummies(features, columns=['Region'])

x_train, x_test, y_train, y_test = train_test_split(features_encoded, labels, test_size=0.3, random_state=2)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train, y_train)

y_pred = knn.predict(x_test)

print("Classification Report:\n", classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred, labels=knn.classes_)

plt.figure(figsize=(7,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=knn.classes_, yticklabels=knn.classes_)
plt.xlabel('Prediksi')
plt.ylabel('Aktual')
plt.title('Confusion Matrix - KNN (Segmentasi Pelanggan)')
plt.show()

print(df['Segment'].value_counts())

"""**Algo 3 - Random Forest: Klasifikasi Category**"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt


features = df[['Sales', 'Quantity', 'Profit']]
labels = df['Category']

x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=2)

rf_model_category = RandomForestClassifier(n_estimators=100, random_state=2)

rf_model_category.fit(x_train, y_train)

y_pred_rf_category = rf_model_category.predict(x_test)

print("Classification Report (Random Forest - Kategori Produk):\n", classification_report(y_test, y_pred_rf_category))

cm_rf_category = confusion_matrix(y_test, y_pred_rf_category)

plt.figure(figsize=(6,5))
sns.heatmap(cm_rf_category, annot=True, fmt='d', cmap='Blues', xticklabels=df['Category'].unique(), yticklabels=df['Category'].unique())
plt.xlabel('Prediksi')
plt.ylabel('Aktual')
plt.title('Confusion Matrix: Prediksi Kategori Produk (Random Forest)')
plt.show()

print(df['Category'].value_counts())
